########################################################################################
# All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
# its licensors.
#
# For complete copyright and license terms please see the LICENSE at the root of this
# distribution (the "License"). All use of this software is governed by the License,
# or, if provided, by the license below or the license accompanying this file. Do not
# remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
########################################################################################

def build(bld):

    bld.CryEngineModule(

        #==============================
        # Settings
        #==============================
        target      = 'OpenDiva',
        vs_filter   = 'Game/OpenDiva',
        file_list   = [
			'WAF/game.waf_files',
			'WAF/game.portaudiosystem.waf_files',
                   
			#steamworks build files.
			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#'WAF/game.steamworks.waf_files',
                    
			#for crymovie code.
			'WAF/game.crymovie.waf_files',

			#for lyswing code.
			#'WAF/game.lyswing.waf_files'
		],
        platforms = ['win_x64','linux','darwin'],
        configurations = ['debug', 'profile', 'performance', 'release'],
        pch         = 'StdAfx.cpp',
        use         = ['AzGameFramework'],
        use_gems    = True,

        #==============================
        # Common
        #==============================
        includes    = [ '.' ,
			bld.Path('Code/CryEngine/CryCommon'),
			bld.Path('Code/CryEngine/CryAction'),
			bld.Path('Code/OpenDiva/Game/Core/Sound/libsndfile/include'),
			bld.Path('Code/OpenDiva/Game/Core/Sound/libsamplerate/include'),
			bld.Path('Code/OpenDiva/Game/Core/Sound/portaudio/include'),
                        
			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#,bld.Path('Code/OpenDiva/Game/Core/Steamworks/steam')
		],
        
        #this is ONLY used for the public steam builds.
        #OpenDiva does not depend on steamworks to function and this can be safely commented out.
        defines = [
			#'STEAMWORKS',
        ],

        lib = [
            'libsndfile-1',
			'libsamplerate-0',
            'portaudio_x64'
        ],
              
        libpath = [
            bld.Path('Code/OpenDiva/Game/Core/Sound/libsndfile/lib'),
            bld.Path('Code/OpenDiva/Game/Core/Sound/libsamplerate/lib')
        ],
                  
        debug_libpath = [
            bld.Path('Code/OpenDiva/Game/Core/Sound/portaudio/lib/Debug')
        ],
        release_libpath = [
            bld.Path('Code/OpenDiva/Game/Core/Sound/portaudio/lib/Release')
        ],

        #==============================
        # Windows
        #==============================
		win_file_list = [
			#for direct sound playback separate from CryAudio
			#this is how we can play our music files
			#'WAF/game.portaudio.win.waf_files',
			#'WAF/game.libsndfile.win.waf_files', #NOTE! Rename the hh include file to hpp! (lmbr_waf doesnt like hh files...)
			#'WAF/game.libsamplerate.win.waf_files'
			'WAF/game.audiolibs.win.waf_files'
		],

		win_defines = [ 'WX_DISABLE' ],

        debug_win_linkflags = [ '/VERBOSE:LIB' ],

        #usage of openmp is to parallel process precalculations.
        #NOTE! NEVER EVER USE OPENMP IN A RENDER THREAD! Spikes cpu usage like crazy!
        win_cflags = [ '/openmp' ],
        win_cxxflags = [ '/openmp' ],
        win_lib    = [
			'gdi32',

			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#'steam_api64'
		],

		win_libpath = [
			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#bld.Path('Code/OpenDiva/Game/Core/Steamworks/redistributable_bin/win64')
		],

        #==============================
        # Linux
        #==============================
		linux_file_list = [
			#for direct sound playback separate from CryAudio
			#this is how we can play our music files
			#'WAF/game.portaudio.linux.waf_files',
			#'WAF/game.libsndfile.linux.waf_files', #NOTE! Rename the hh include file to hpp! (lmbr_waf doesnt like hh files...)
			#'WAF/game.libsamplerate.linux.waf_files'
			'WAF/game.audiolibs.linux.waf_files'
		],

        #usage of openmp is to parallel process precalculations.
        #NOTE! NEVER EVER USE OPENMP IN A RENDER THREAD! Spikes cpu usage like crazy!
        linux_cflags = [ '-fopenmp' ],
        linux_cxxflags = [ '-fopenmp' ],

		linux_lib = [
			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#'steam_api',
		],
		linux_libpath = [
			#bld.Path('Code/OpenDiva/Game/Core/Steamworks/redistributable_bin'),
		],

        #==============================
        # Darwin
        #==============================
		darwin_file_list = [
			#for direct sound playback separate from CryAudio
			#this is how we can play our music files
			#'WAF/game.portaudio.mac.waf_files',
			#'WAF/game.libsndfile.mac.waf_files', #NOTE! Rename the hh include file to hpp! (lmbr_waf doesnt like hh files...)
			#'WAF/game.libsamplerate.mac.waf_files',
			'WAF/game.audiolibs.mac.waf_files',
			'WAF/game_mac.waf_files'
		],

        #usage of openmp is to parallel process precalculations.
        #NOTE! NEVER EVER USE OPENMP IN A RENDER THREAD! Spikes cpu usage like crazy!
        darwin_cflags = [ '-fopenmp' ],
        darwin_cxxflags = [ '-fopenmp' ],

		darwin_lib = [
			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#'steam_api',
		],
		darwin_libpath = [
			#bld.Path('Code/OpenDiva/Game/Core/Steamworks/redistributable_bin'),
		],

		#==============================
        # UNUSED
        #==============================

        #==============================
        # Android
        #==============================
        #incase we ever compile to android (as if that will happen...)
        #android_cflags = [ '-fopenmp' ],
        #android_cxxflags = [ '-fopenmp' ],

        #android_use = [ 'AndroidLauncher' ],

        #==============================
        # iOS
        # 'ios_output_file_name' must match both
        # 'executable_name' in '_WAF_/project.json' and
        # 'Executable file' in '../Resources/IOSLauncher/Info.plist'
        #==============================
        #ios_output_file_name = 'OpenDivaLauncher',
        #ios_file_list = ['WAF/game_ios.waf_files'],

    )
