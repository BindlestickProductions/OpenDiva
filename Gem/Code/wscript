def build(bld):
    bld.DefineGem(
        # General
        file_list = [
			'opendiva.waf_files',
                   
			#steamworks build files.
			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#'opendiva.steamworks.waf_files',
		],
        platforms = ['win_x64', 'win_x64_vs2015', 'win_x64_vs2013','linux','darwin_x64'],  #set to only compile on windows, linux, and mac
        configurations = ['debug', 'profile', 'performance', 'release'], #no server compiling.
        use = ['AzCore', 'AzGameFramework'],

        includes = [ '.',
			bld.Path('Code/CryEngine/CryCommon'),
			bld.Path('Code/CryEngine/CryAction'),
			bld.Path('Gems/Maestro/Code/Source')
                        
			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#bld.Path('OpenDiva/Gem/Code/Source/Core/Steamworks/steam')
		],
        
        #this is ONLY used for the public steam builds.
        #OpenDiva does not depend on steamworks to function and this can be safely commented out.
        defines = [
			#'STEAMWORKS',
        ],

        #==============================
        # Windows
        #==============================
		win_defines = [
			'WX_DISABLE', #custom define, used to bypass /WX warnings as errors.
			'NOMINMAX'    #disable windows.h min/max definitions.
		],

        debug_win_linkflags = [ '/VERBOSE:LIB' ],

        #usage of openmp is to parallel process precalculations.
        #NOTE! NEVER EVER USE OPENMP IN A RENDER THREAD! Spikes cpu usage like crazy!
        win_cflags = [ '/openmp' ],
        win_cxxflags = [ '/openmp' ],

        win_lib = [
			'gdi32',

			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#'steam_api64'
		],

		win_libpath = [
			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#bld.Path('Code/OpenDiva/Game/Core/Steamworks/redistributable_bin/win64')
		],
        win_features = ['crcfix'],

        #==============================
        # Linux
        #==============================
        #usage of openmp is to parallel process precalculations.
        #NOTE! NEVER EVER USE OPENMP IN A RENDER THREAD! Spikes cpu usage like crazy!
        linux_cflags = [ '-fopenmp' ],
        linux_cxxflags = [ '-fopenmp' ],

		linux_lib = [
			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#'steam_api',
		],

		linux_libpath = [
			#bld.Path('Code/OpenDiva/Game/Core/Steamworks/redistributable_bin'),
		],

        #==============================
        # Darwin
        #==============================
		darwin_file_list = [
			'opendiva_mac.waf_files'
		],

        #usage of openmp is to parallel process precalculations.
        #NOTE! NEVER EVER USE OPENMP IN A RENDER THREAD! Spikes cpu usage like crazy!
        darwin_cflags = [ '-fopenmp' ],
        darwin_cxxflags = [ '-fopenmp' ],

		darwin_lib = [
			#this is ONLY used for the public steam builds.
			#OpenDiva does not depend on steamworks to function and this can be safely commented out.
			#'steam_api',
		],
		darwin_libpath = [
			#bld.Path('Code/OpenDiva/Game/Core/Steamworks/redistributable_bin'),
		],

        # Platform Specific
        #android_use             = ['AndroidLauncher'],

        # ==============================
        # iOS
        # 'ios_output_file_name' must match both
        # 'executable_name' in 'project.json' and
        # 'Executable file' in '../Resources/IOSLauncher/Info.plist'
        # ==============================
        #ios_file_list           = ['opendiva_ios.waf_files'],

        # ==============================
        # AppleTV
        # 'appletv_output_file_name' must match both
        # 'executable_name' in 'project.json' and
        # 'Executable file' in '../Resources/AppleTVLauncher/Info.plist'
        # ==============================
        #appletv_file_list       = ['opendiva_appletv.waf_files'],
		
        # Testing
        test_all_file_list      = ['opendiva_tests.waf_files'],

        # Add additional custom build options here

    )
